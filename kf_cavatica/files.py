import sevenbridges as sbg
from pathlib import Path


# generate the list of files
def list_files_recursively(
    api,
    query,
    parent,
    files=[],
    folder_name="",
):
    """fetch a project from the sb api.
    :param api: API object generated by sevenbridges.Api()
    :type api: Sevenbridges API Object
    :param query: api.files.query object
    :type query: api.files.query
    :param parent: parent of the files returned in the query. project if the
     query is at the root of a project or file if the query is not at project
     root
    :type parent: sbg.models.project.Project or sbg.models.file.File
    :param files: files returned by the function
    :type files: list
    :param folder_name: folder name of files within query
    :type folder_name: string
    :return: list of sevenbridges file objects
    :rtype: list
    """
    # type checking
    if isinstance(parent, sbg.models.project.Project):
        parent_id = parent.root_folder
    elif isinstance(parent, sbg.models.file.File):
        parent_id = parent.id

    if not folder_name:
        folder_name = Path(folder_name)
    for file in query.all():
        if not file.is_folder():
            file.metadata["parent_file_name"] = folder_name
            files.append(file)
        else:
            folder_name = folder_name / file.name
            res = list_files_recursively(
                api,
                api.files.query(parent=file),
                folder_name=folder_name,
                parent=file,
            )
            folder_name = folder_name.parents[0]
    return files
